<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Nginx 小例子]]></title>
      <url>/2017/08/28/NginxSomeExample/</url>
      <content type="html"><![CDATA[<h3 id="1-根据请求的域名选择不同的Server块配置"><a href="#1-根据请求的域名选择不同的Server块配置" class="headerlink" title="1. 根据请求的域名选择不同的Server块配置"></a>1. 根据请求的域名选择不同的Server块配置</h3><p>Host:</p>
<blockquote>
<ul>
<li>本地: 192.168.0.221 </li>
<li>虚拟机: 192.168.0.222</li>
</ul>
</blockquote>
<p>Servers:</p>
<blockquote>
<ul>
<li>4个Tomcat在本地 </li>
<li>1个Nginx在虚拟机</li>
</ul>
</blockquote>
<a id="more"></a>
<ol>
<li>修改本地hosts文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">192.168.0.222 pf.com</div><div class="line">192.168.0.222 p1.pf.com</div><div class="line">192.168.0.222 p2.pf.com</div><div class="line">192.168.0.222 p3.pf.com</div><div class="line">192.168.0.222 p4.pf.com</div></pre></td></tr></table></figure>
<ol>
<li>在<code>nginx/html</code>目录下键测试网页文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# ls html/</div><div class="line">50x.html  index.html  p1  p2  p3  p4</div><div class="line">[root@localhost nginx]# ls html/p1</div><div class="line">index.html</div></pre></td></tr></table></figure>
<p><code>html</code>文件内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;title&gt;P1&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1&gt;welcome to P1&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>3.Nginx.conf配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  p1.pf.com; # 匹配Request Header中的Host</div><div class="line"></div><div class="line">    location / &#123;                       </div><div class="line">        root   html/p1;                   </div><div class="line">        index  index.html index.htm;   </div><div class="line">    &#125;                                  </div><div class="line">    </div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   html;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  p2.pf.com;</div><div class="line"></div><div class="line">    location / &#123;                       </div><div class="line">        root   html/p2;                   </div><div class="line">        index  index.html index.htm;   </div><div class="line">    &#125;                                  </div><div class="line">    </div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   html;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>访问测试</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://pf.com/</div><div class="line">http://p1.pf.com/</div><div class="line">http://p2.pf.com/</div></pre></td></tr></table></figure>
<h3 id="2-查看反代中不同的请求地址"><a href="#2-查看反代中不同的请求地址" class="headerlink" title="2. 查看反代中不同的请求地址"></a>2. 查看反代中不同的请求地址</h3><p>继续使用上次配置的测试环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Tomcat:</div><div class="line">http://192.168.0.221:8080/a1</div><div class="line">http://192.168.0.221:9080/a1</div><div class="line"></div><div class="line">Nginx:</div><div class="line">http://192.168.0.222/a1/</div><div class="line"></div><div class="line">客户端地址:</div><div class="line">192.168.0.221</div></pre></td></tr></table></figure>
<p>修改<code>JSP</code>文件,追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">request.getRemoteAddr(): &lt;%=request.getRemoteAddr() %&gt; &lt;br&gt;</div><div class="line">request.getHeader(&quot;WL-Proxy-Client-IP&quot;): &lt;%=request.getHeader(&quot;WL-Proxy-Client-IP&quot;) %&gt; &lt;br&gt;</div><div class="line">request.getHeader(&quot;Proxy-Client-IP&quot;): &lt;%=request.getHeader(&quot;Proxy-Client-IP&quot;) %&gt; &lt;br&gt;</div><div class="line">request.getHeader(&quot;x-forwarded-for&quot;): &lt;%=request.getHeader(&quot;x-forwarded-for&quot;) %&gt; &lt;br&gt;</div></pre></td></tr></table></figure>
<p>其中,<code>Proxy-Client-IP</code> 字段和 <code>WL-Proxy-Client-IP</code> 字段只在 Apache（Weblogic Plug-In Enable）+WebLogic 搭配下出现，其中“WL” 就是 WebLogic 的缩写<br><code>x-forwarded-for</code> 简称 XFF 头 ，只有在通过了 HTTP 代理或者负载均衡服务器时才会添加该项<br><code>REMOTE_ADDR</code>是客户端跟服务器“握手”时的IP,对于未使用反代软件时可获取客户端IP</p>
<ol>
<li>认情况下反向代理是不会转发请求中的Host头部,服务端只能获取代理服务器的Ip地址<br>配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location ^~ /a1 &#123;</div><div class="line">    proxy_pass http://tomcats;</div><div class="line"></div><div class="line">    #proxy_set_header Host $host:$server_port;</div><div class="line">    #proxy_set_header X-Real-IP $remote_addr;</div><div class="line">    #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.222/a1/</div></pre></td></tr></table></figure>
<p>响应</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">request.getRemoteAddr(): 192.168.0.222 </div><div class="line">request.getHeader(&quot;WL-Proxy-Client-IP&quot;): null </div><div class="line">request.getHeader(&quot;Proxy-Client-IP&quot;): null </div><div class="line">request.getHeader(&quot;x-forwarded-for&quot;): null</div></pre></td></tr></table></figure>
<ol>
<li>在请求中设置真实的IP地址</li>
</ol>
<p>配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location ^~ /a1 &#123;</div><div class="line">    proxy_pass http://tomcats;</div><div class="line"></div><div class="line">    proxy_set_header Host $host:$server_port;</div><div class="line">    proxy_set_header X-Real-IP $remote_addr;</div><div class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.222/a1/</div></pre></td></tr></table></figure>
<p>响应</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">request.getRemoteAddr(): 192.168.0.222 </div><div class="line">request.getHeader(&quot;WL-Proxy-Client-IP&quot;): null </div><div class="line">request.getHeader(&quot;Proxy-Client-IP&quot;): null </div><div class="line">request.getHeader(&quot;x-forwarded-for&quot;): 192.168.0.221</div></pre></td></tr></table></figure>
<ol>
<li>在请求中设置真实的端口</li>
</ol>
<p>JSP追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.getServerPort(): &lt;%=request.getServerPort() %&gt; &lt;br&gt;</div></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">listen       7080;</div><div class="line"></div><div class="line">location ^~ /a1 &#123;</div><div class="line">    proxy_pass http://tomcats;</div><div class="line"></div><div class="line">    proxy_set_header Host $host; # :$server_port</div><div class="line">    proxy_set_header X-Real-IP $remote_addr;</div><div class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.222:7080/a1/</div></pre></td></tr></table></figure>
<p>响应</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">request.getRemoteAddr(): 192.168.0.222 </div><div class="line">request.getHeader(&quot;WL-Proxy-Client-IP&quot;): null </div><div class="line">request.getHeader(&quot;Proxy-Client-IP&quot;): null </div><div class="line">request.getHeader(&quot;x-forwarded-for&quot;): 192.168.0.221 </div><div class="line">request.getServerPort(): 80</div></pre></td></tr></table></figure>
<p>修改配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location ^~ /a1 &#123;</div><div class="line">    proxy_pass http://tomcats;</div><div class="line"></div><div class="line">    proxy_set_header Host $host:$server_port;</div><div class="line">    proxy_set_header X-Real-IP $remote_addr;</div><div class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>响应</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">request.getRemoteAddr(): 192.168.0.222 </div><div class="line">request.getHeader(&quot;WL-Proxy-Client-IP&quot;): null </div><div class="line">request.getHeader(&quot;Proxy-Client-IP&quot;): null </div><div class="line">request.getHeader(&quot;x-forwarded-for&quot;): 192.168.0.221 </div><div class="line">request.getServerPort(): 7080</div></pre></td></tr></table></figure>
<h3 id="3-Nginx反代谷歌"><a href="#3-Nginx反代谷歌" class="headerlink" title="3. Nginx反代谷歌"></a>3. Nginx反代谷歌</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name shenshenshou.top;</div><div class="line">    rewrite ^(.*) https://shenshenshou.top$1 permanent;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">        listen       443;</div><div class="line">        server_name  shenshenshou.top;</div><div class="line">        ssl on;</div><div class="line">        ssl_certificate      cert/214101960730977.pem;</div><div class="line">        ssl_certificate_key  cert/214101960730977.key;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line"></div><div class="line">            proxy_redirect off; # 取消页面重定向的做法</div><div class="line">            proxy_cookie_domain google.com shenshenshou.top; # 把cookie的作用域替换成我们的域名</div><div class="line">            proxy_pass https://www.google.com; # 上游服务器地址</div><div class="line">            proxy_connect_timeout 60s;</div><div class="line">            proxy_read_timeout 5400s;</div><div class="line">            proxy_send_timeout 5400s;</div><div class="line">            </div><div class="line">            proxy_set_header Host &quot;www.google.com&quot;;</div><div class="line">            proxy_set_header User-Agent $http_user_agent;</div><div class="line">            proxy_set_header Referer https://www.google.com;</div><div class="line">            proxy_set_header Accept-Encoding &quot;&quot;;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr; </div><div class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </div><div class="line">            proxy_set_header X-Forwarded-Proto https;</div><div class="line">            proxy_set_header Accept-Language &quot;zh-CN&quot;; # 设置语言为中文</div><div class="line">            proxy_set_header Cookie &quot;PREF=ID=047808f19f6de346:U=0f62f33dd8549d11:FF=2:LD=en-US:NW=1:TM=1325338577:LM=1332142444:GM=1:SG=2:S=rE0SyJh2W1IQ-Maw&quot;;</div><div class="line">            # 传固定的cookie给谷歌，是为了禁止即时搜索，因为开启即时搜索无法替换内容。还有设置为新窗口打开网站，这个符合我们打开链接的习惯</div><div class="line">            sub_filter https://www.google.com.hk shenshenshou.top; # 把谷歌的域名替换成我们的</div><div class="line">            sub_filter https://www.google.com shenshenshou.top; # 把谷歌的域名替换成我们的</div><div class="line">            </div><div class="line">            sub_filter_once off; # 意思是只查找并替换一次。on是开启此功能，off是关闭——默认值是on</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="4-负载均衡配置"><a href="#4-负载均衡配置" class="headerlink" title="4. 负载均衡配置"></a>4. 负载均衡配置</h3><h4 id="1-权重配置"><a href="#1-权重配置" class="headerlink" title="1. 权重配置"></a>1. 权重配置</h4><p><code>upstream</code>配置</p>
<p><code>weight</code>用来配置权重,默认是1,权重越高分配给这台服务器的请求就越多.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">upstream tomcats &#123;</div><div class="line">    server 192.168.0.221:6080;</div><div class="line">    server 192.168.0.221:7080 weight=1;</div><div class="line">    server 192.168.0.221:8080 weight=3;</div><div class="line">    server 192.168.0.221:9080 weight=5;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-负载均衡算法"><a href="#2-负载均衡算法" class="headerlink" title="2. 负载均衡算法"></a>2. 负载均衡算法</h4><p>1&gt; <code>ip_hash</code>根据客户IP进行负载均衡,即相同的IP将负载到同一个upstream server,<br>经测试同一个网段的也会负载到同一个upstream server</p>
<p>2&gt; 当其中一台机器不可用时,可以使用<code>down</code>参数标识.确保转发策略的一惯性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">upstream tomcats &#123;</div><div class="line">    ip_hash;</div><div class="line">    server 192.168.0.221:6080;</div><div class="line">    server 192.168.0.221:7080;</div><div class="line">    server 192.168.0.221:8080 down;</div><div class="line">    server 192.168.0.221:9080;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx 简单整理]]></title>
      <url>/2017/08/28/NginxSimpleCollect/</url>
      <content type="html"><![CDATA[<h2 id="1-特色说明"><a href="#1-特色说明" class="headerlink" title="1. 特色说明"></a>1. 特色说明</h2><ol>
<li>Nginx (“engine x”) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。</li>
<li>作为Web服务器，nginx处理静态文件、索引文件以及自动索引效率非常高</li>
<li>作为代理服务器，Nginx可以实现无缓存的反向代理加速，提高网站运行速度</li>
<li>作为负载均衡服务器，Nginx既可以在内部直接支持Rails和PHP，也可以支持HTTP代理服务器，对外进行服务。同时支持简单的容错和利用算法进行负载均衡</li>
<li>在高可用性方面，Nginx支持热部署，启动速度特别迅速，因此可以在不间断服务的情况下，对软件版本或者配置进行升级，即使运行数月也无需重新启动，几乎可以做到7×24小时的不间断运行。</li>
</ol>
<a id="more"></a>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="2-1-Linux环境下安装"><a href="#2-1-Linux环境下安装" class="headerlink" title="2.1 Linux环境下安装"></a>2.1 <code>Linux</code>环境下安装</h3><ol>
<li>安装位置<br>源码目录:/usr/local/devtools<br>安装目录:/opt/nginx<br>cpu核心数:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ28af1xn4uZ devtools]# grep &apos;core id&apos; /proc/cpuinfo | sort -u | wc -l</div><div class="line">1</div></pre></td></tr></table></figure>
<ol>
<li>安装软件必需环境<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rpm -qa|grep gcc # 检查有木有</div><div class="line">yum install -y gcc # 没有的话就安装(centos)</div><div class="line">apt-get install -y gcc # ubuntu</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. gcc gcc-c++</div><div class="line">2. pcre pcre-devel</div><div class="line">3. zlib zlib-devel</div><div class="line">4. openssl openssl-devel</div></pre></td></tr></table></figure>
<ol>
<li>内核参数优化<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysctl.conf # 编辑配置文件</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">fs.file-max = 999999</div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line">net.ipv4.tcp_keepalive_time = 600</div><div class="line">net.ipv4.tcp_fin_timeout = 30</div><div class="line">net.ipv4.tcp_max_tw_buckets = 5000</div><div class="line">net.ipv4.ip_local_port_range = 1024 61000</div><div class="line">net.ipv4.tcp_rmem = 4096 32768 262142</div><div class="line">net.ipv4.tcp_wmem = 4096 32768 262142</div><div class="line">net.core.netdev_max_backlog = 8096</div><div class="line">net.core.rmem_default = 262144</div><div class="line">net.core.wmem_default = 262144</div><div class="line">net.core.rmem_max = 2097152</div><div class="line">net.core.wmem_max = 2097152</div><div class="line">net.ipv4.tcp_syncookies = 1</div><div class="line">net.ipv4.tcp_max_syn.backlog=1024</div></pre></td></tr></table></figure>
<ol>
<li>安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd nginx-1.4.7</div><div class="line">./configure --prefix=/opt/nginx </div><div class="line">make </div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="2-2-Windows环境下安装"><a href="#2-2-Windows环境下安装" class="headerlink" title="2.2 Windows环境下安装"></a>2.2 <code>Windows</code>环境下安装</h3><ol>
<li><a href="http://nginx.org/en/download.html" target="_blank" rel="external">下载</a>解压，绿色版直接用</li>
</ol>
<h2 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h2><ol>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/nginx # 默认读取配置文件启动</div><div class="line">/nginx -c /pathtoconfig/nginx.conf # 读取指定配置文件启动（建议使用默认的配置文件，配置文件多了时间长会弄混）</div><div class="line">/nginx -p /pathtonginx/nginx # 指定Nginxi的安装目录</div><div class="line">/nginx -g &quot;pid /var/nginx/test.pid&quot; # 临时指定全局配置项并生效（实例：把pid写入test.pid文件中）</div></pre></td></tr></table></figure>
</li>
<li><p>检验配置文件是否有误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/nginx -t</div></pre></td></tr></table></figure>
</li>
<li><p>查看版本或参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/nginx -v # 显示Nginx版本信息</div><div class="line">/nginx -V # 先死编译阶段参数 就是configure时的参数</div></pre></td></tr></table></figure>
</li>
<li><p>停止服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/nginx -s stop # 强杀master进程</div><div class="line">/nginx -s quit # 正常处理完当前请求再关闭服务</div></pre></td></tr></table></figure>
</li>
<li><p>重载配置项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/nginx -s reload # 使运行中的Nginx服务重载nginx.conf配置文件（下午我说错了 纠正）</div></pre></td></tr></table></figure>
</li>
<li><p>平滑升级（linux）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a. kill -s SIGUSR2 &lt;nginx master pid&gt; # 重命名nginx的pid文件，如将/usr/local/nginx/logs/nginx.pid -&gt; nginx.pid.oldbin 这样新的nginx才有可能启动成功</div><div class="line">b. 启动新版本的nginx</div><div class="line">c. kill -s SIGQUIT &lt;nginx master pid&gt; # 以“优雅”的方式关闭旧版本Nginx，随后只有新版本Nginx服务运行</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/" target="_blank" rel="external">官方wiki</a></p>
<h2 id="4-常用配置说明"><a href="#4-常用配置说明" class="headerlink" title="4. 常用配置说明"></a>4. 常用配置说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#user  nobody; # 指定Nginx Worker进程运行用户以及用户组，默认nobody</div><div class="line">worker_processes  1; # 指定Nginx要开启的进程数，如果是多核 CPU，建议指定CPU的数量</div><div class="line"></div><div class="line">#error_log  logs/error.log; # 定义全局错误日志文件，级别：debug、info、notice、warn、error、crit（可以参照log4j理解）</div><div class="line">#error_log  logs/error.log  notice;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid; # master 进程 Id存储位置</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024; # Nginx每个进程的最大连接数，默认1024</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    # 定义Nginx日志的输出格式</div><div class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    #访问日志存放路径</div><div class="line">    #access_log  logs/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on; #开启高效文件传输模式。需要把tcp_nopush和tcp_nodelay设置为on，防止网络阻塞</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;#设置客户端连接保持活动的超时时间，超时之后，服务器关闭该连接</div><div class="line"></div><div class="line">    #gzip  on;#开启或关闭gzip模块</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80; #Nginx监听端口</div><div class="line">        server_name  localhost; #指定IP地址或域名，多个域名用空格分开</div><div class="line"></div><div class="line">        #charset koi8-r; #设置网页的默认编码格式 一般utf-8</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        # 通过过滤用户请求的url来确定是否走该配置块</div><div class="line">        location / &#123;</div><div class="line">            root   html; # 映射访问的本地目录 相对路径或绝对路径</div><div class="line">            index  index.html index.htm; # index设定访问的默认首页地址</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        #error_page  404              /404.html;</div><div class="line"></div><div class="line">        # redirect server error pages to the static page /50x.html</div><div class="line">        #</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    proxy_pass   http://127.0.0.1;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    root           html;</div><div class="line">        #    fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #    fastcgi_index  index.php;</div><div class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</div><div class="line">        #    include        fastcgi_params;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">        # concurs with nginx&apos;s one</div><div class="line">        #</div><div class="line">        #location ~ /\.ht &#123;</div><div class="line">        #    deny  all;</div><div class="line">        #&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       8000;</div><div class="line">    #    listen       somename:8080;</div><div class="line">    #    server_name  somename  alias  another.alias;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">    # HTTPS server</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       443 ssl;</div><div class="line">    #    server_name  localhost;</div><div class="line"></div><div class="line">    #    ssl_certificate      cert.pem;</div><div class="line">    #    ssl_certificate_key  cert.key;</div><div class="line"></div><div class="line">    #    ssl_session_cache    shared:SSL:1m;</div><div class="line">    #    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    #    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-反向代理"><a href="#5-反向代理" class="headerlink" title="5. 反向代理"></a>5. 反向代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 上游服务器列表</div><div class="line">upstream tomcats &#123;</div><div class="line">    server 127.0.0.1:8080; # 指定后端服务器的IP地址和端口</div><div class="line">    server 127.0.0.1:9080;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location ^~ /a1 &#123;</div><div class="line">    proxy_pass http://tomcats; # 负载均衡(upstream)名称</div><div class="line"></div><div class="line">    #proxy_set_header:设置由后端的服务器获取用户的主机名或者真实IP地址，以及代理者的真实IP地址</div><div class="line">    proxy_set_header Host $host:$server_port; # 客户端真实ip和端口号</div><div class="line">    proxy_set_header X-Real-IP $remote_addr;</div><div class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-docker-主机命令"><a href="#6-docker-主机命令" class="headerlink" title="6 docker 主机命令"></a>6 docker 主机命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker-machine start # 开机</div><div class="line">$ docker-machine stop # 关机</div><div class="line">$ docker-machine restart # 重启</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker在日常开发中的应用]]></title>
      <url>/2017/08/28/DockerInDevApply/</url>
      <content type="html"><![CDATA[<h2 id="Docker在日常开发中的应用"><a href="#Docker在日常开发中的应用" class="headerlink" title="Docker在日常开发中的应用"></a>Docker在日常开发中的应用</h2><p>开发时可能会在开发机器上装各种各样的容器，对开发机器造成的压力较大，我们可以采用docker的方式，用来处理各种开发环境的管理。docker对win10之前的系统版本并不友好，推荐使用win10机器安装docker</p>
<h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a><code>docker</code>命令</h3><p><code>docker search 镜像名</code>: 搜索容器镜像</p>
<p><code>docker pull 镜像名</code>: 下载镜像</p>
<p><code>docker images</code>: 查看本地所有镜像</p>
<a id="more"></a>
<p><code>docker ps</code>: 查看启动的容器列表</p>
<p><code>docker ps -a</code>: 查看所有的容器列表</p>
<p><code>docker run 参数</code>: 启动容器</p>
<p><code>docker start 容器名/容器编号</code>: 启动容器</p>
<p><code>docker stop 容器名/容器编号</code>: 关闭容器</p>
<p><code>docker exec 容器名/容器编号</code>: 进入容器shell </p>
<p><code>docker cp 拷贝文件 容器名称:容器物理文件路径</code>: 从本地系统拷贝文件到容器</p>
<h3 id="样例：在docker中导入数据库备份"><a href="#样例：在docker中导入数据库备份" class="headerlink" title="样例：在docker中导入数据库备份"></a>样例：在docker中导入数据库备份</h3><h4 id="1-进入启动数据库"><a href="#1-进入启动数据库" class="headerlink" title="1. 进入启动数据库"></a>1. 进入启动数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run --name xe -d -p 9090:9090 -p 1521:1521 wnameless/oracle-xe-11g </div><div class="line">或</div><div class="line">docker start xe</div></pre></td></tr></table></figure>
<h4 id="2-查询数据文件存放位置"><a href="#2-查询数据文件存放位置" class="headerlink" title="2. 查询数据文件存放位置"></a>2. 查询数据文件存放位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">select b.file_name 物理文件名,</div><div class="line">       b.tablespace_name 表空间,</div><div class="line">       b.bytes / 1024 / 1024 大小M,</div><div class="line">       (b.bytes - sum(nvl(a.bytes, 0))) / 1024 / 1024 已使用M,</div><div class="line">       substr((b.bytes - sum(nvl(a.bytes, 0))) / (b.bytes) * 100, 1, 5) 利用率</div><div class="line">  from dba_free_space a, dba_data_files b</div><div class="line"> where a.file_id = b.file_id</div><div class="line"> group by b.tablespace_name, b.file_name, b.bytes</div><div class="line"> order by b.tablespace_name;</div></pre></td></tr></table></figure>
<h4 id="3-创建表空间以及用户"><a href="#3-创建表空间以及用户" class="headerlink" title="3. 创建表空间以及用户"></a>3. 创建表空间以及用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">CREATE TABLESPACE SPK_DATA DATAFILE &apos;/u01/app/oracle/oradata/XE/SPK_DATA.dbf&apos;</div><div class="line">SIZE 1073740</div><div class="line">AUTOEXTEND ON NEXT 104857600 MAXSIZE 512M</div><div class="line">LOGGING ONLINE PERMANENT BLOCKSIZE 8192</div><div class="line">EXTENT MANAGEMENT LOCAL AUTOALLOCATE DEFAULT</div><div class="line">NOCOMPRESS SEGMENT SPACE MANAGEMENT AUTO;</div><div class="line">create user spk identified by spk default tablespace SPK_DATA;</div><div class="line">grant execute on sys.DBMS_CRYPTO to spk;</div><div class="line">grant connect to spk;</div><div class="line">grant resource to spk;</div><div class="line">grant create view to spk;</div><div class="line">grant debug any procedure to spk;</div><div class="line">grant debug connect session to spk;</div><div class="line">grant unlimited tablespace to spk;</div><div class="line">grant dba to spk;</div></pre></td></tr></table></figure>
<h4 id="4-SSH登录docker容器"><a href="#4-SSH登录docker容器" class="headerlink" title="4. SSH登录docker容器"></a>4. SSH登录docker容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -ti b5bb9f8850d1 /bin/bash</div></pre></td></tr></table></figure>
<h4 id="5-将数据库备份文件导入容器中"><a href="#5-将数据库备份文件导入容器中" class="headerlink" title="5. 将数据库备份文件导入容器中"></a>5. 将数据库备份文件导入容器中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker cp spk0309.DMP xe:/u01/app/oracle/oradata/XE/bak</div></pre></td></tr></table></figure>
<h4 id="6-创建目录以及授权"><a href="#6-创建目录以及授权" class="headerlink" title="6. 创建目录以及授权"></a>6. 创建目录以及授权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir bak</div><div class="line">create directory bak as &apos;/u01/app/oracle/oradata/XE/bak&apos;;</div><div class="line">grant read, write on directory bak  to public;</div></pre></td></tr></table></figure>
<h4 id="7-修改数据库文件所属用户"><a href="#7-修改数据库文件所属用户" class="headerlink" title="7. 修改数据库文件所属用户"></a>7. 修改数据库文件所属用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown oracle:dba spk0309.DMP</div></pre></td></tr></table></figure>
<h4 id="8-导入数据"><a href="#8-导入数据" class="headerlink" title="8. 导入数据"></a>8. 导入数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">impdp spk/spk DIRECTORY=bak DUMPFILE=spk0309.DMP logfile=spk0309.log</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在windows7上安装Docker Toolbox]]></title>
      <url>/2017/08/25/Install-Docker-Toolbox-on-Windows/</url>
      <content type="html"><![CDATA[<blockquote>
<p>传统桌面系统解决方案. Docker Toolbox是为不符合<a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="external">Docker for Mac</a>和<a href="https://docs.docker.com/docker-for-windows/" target="_blank" rel="external">Docker for Windows</a>安装要求的老版Windows和Mac系统准备的. 如果可以的话,还是建议尽快将老版操作系统升级.</p>
</blockquote>
<p>Docker Toolbox 为不满足Docker最低系统安装要求的老版系统提供了一个使用Docker的方式.</p>
<p>如果你还没有准备好,请首先下载安装文件:<a href="https://download.docker.com/win/stable/DockerToolbox.exe" target="_blank" rel="external">Get Docker Toolbox for Windows</a></p>
<a id="more"></a>
<h2 id="安装文件内容及安装方式"><a href="#安装文件内容及安装方式" class="headerlink" title="安装文件内容及安装方式"></a>安装文件内容及安装方式</h2><p>Docker Toolbox包含下面的Docker工具</p>
<ul>
<li>运行Docker引擎来创建镜像和容器的Docker CLI客户端</li>
<li>可以在windows终端中运行docker 引擎命令的Docker Machine</li>
<li>运行<code>docker-compose</code>命令的Docker Compose</li>
<li><code>Kitematic</code> Docker图形化管理界面</li>
<li>预先配置Docker命令行运行环境的Docker GetStart shell脚本</li>
<li>Oracle VM 虚拟机</li>
</ul>
<p>由于Docker引擎守护进程使用了Linux特有的内容功能,故我们不能直接在windows主机上直接运行docker. 相反, 我们需要使用 Docker Machine命令工具<code>docker-machine</code>,在windows主机上创建一个小的Linux VM内核, 该内核就是Docker引擎在windows主机运行的基础.</p>
<blockquote>
<p>新系统的一个优势就是可以直接使用本地的虚拟化环境,而不需要在本机上安装VirtualBox来运行docker</p>
</blockquote>
<h2 id="第一步-检查系统版本"><a href="#第一步-检查系统版本" class="headerlink" title="第一步:检查系统版本"></a>第一步:检查系统版本</h2><p>为了运行docker, 你的主机必须安装了64位的win7或其他更高的操作系统,此外,你必须保证你已经启用了本机的虚拟化环境(virtualization ,一般在BIOS里对该项进行启用或禁用).</p>
<h2 id="第二步-安装-Docker-Toolbox"><a href="#第二步-安装-Docker-Toolbox" class="headerlink" title="第二步:安装 Docker Toolbox"></a>第二步:安装 Docker Toolbox</h2><p>在这一部分,你将安装Docker Toolbox软件以及几个辅助性软件. 在安装过程中你的主机将会安装以下软件.</p>
<ul>
<li>windows版本的docker客户端</li>
<li>Docker Toolbox管理工具以及镜像文件</li>
<li>Oracle VM虚拟机</li>
<li>GIT unix工具</li>
</ul>
<p>如果你本地之前已经安装了VM虚拟机的其他版本,无需重复安装该虚拟机,当出现提示时,取消勾选该安装选项即可.</p>
<p>如果你的Virtual Box正在运行,请在你安装Docker Toolbox之前关闭该虚拟机</p>
<ol>
<li>打开<a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="external">Docker toolbox</a>主页</li>
<li>点击安装包下载链接开始下载</li>
<li>下载完成后双击安装包开始安装<br> 安装程序会打开一个弹出窗口引导用户安装<br> 如果你的windows安全弹窗询问你是否允许该程序时,请选择<code>yes</code>. 安装界面会展示<code>Setup - Docker Toolbox for Windows</code>引导.<br> <img src="https://docs.docker.com/toolbox/images/installer_open.png" alt="image"></li>
<li>点击<code>Next</code>同意默认安装选项并开始安装</li>
<li>当windows安全程序通知该安装程序会对系统做一些改变,请点击允许.<br> 当安装成功,安装程序会报告安装成功<br><img src="https://docs.docker.com/toolbox/images/finish.png" alt="image"></li>
<li>取消勾选”View Shortcuts in File Explorer”,点击<code>Finish</code>完成安装</li>
</ol>
<h2 id="第三步-安装确认"><a href="#第三步-安装确认" class="headerlink" title="第三步:安装确认"></a>第三步:安装确认</h2><p>安装完成后,Docker Toolbox和VirtualBox将会出现在你的应用程序安装文件夹.在这一步你可以启动Docker Toolbox并运行一个Docker 命令实例</p>
<ol>
<li>在你的桌面找到Docker Toolbox图标<br><img src="https://docs.docker.com/toolbox/images/icon-set.png" alt="sss"></li>
<li>点击<code>Docker Toolbox terminal</code>图标<br> 这个终端会为你的Docker Toolbox配置一个地方,配置完成时终端会展示一个<code>$</code>提示.(我在这一步失败了,点击弹窗报错,怀疑是环境变量没配置好,右键属性发现它通过bash.exe执行安装目录的start.sh文件,看了下没看懂,不过直接点击start.sh发现可以配置成功并启动docker,可以暂时使用这种方式使用.以后找到问题会反馈.)</li>
</ol>
<h2 id="第四步-使用Kitematic-Alpha-管理你的docker"><a href="#第四步-使用Kitematic-Alpha-管理你的docker" class="headerlink" title="第四步:使用Kitematic (Alpha)管理你的docker"></a>第四步:使用<code>Kitematic (Alpha)</code>管理你的docker</h2><pre><code>使用start.sh启动docker之后,打开Kitematic (Alpha)程序,在日常开发中可以使用图形化界面来进行进行镜像和容器的获取与管理.
</code></pre><blockquote>
<p><a href="https://docs.docker.com/toolbox/toolbox_install_windows/" target="_blank" rel="external">原文地址</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring jdbcTemplate 调用 Oracle 存储过程]]></title>
      <url>/2017/08/25/SpringJDBCTemplateCallProduce/</url>
      <content type="html"><![CDATA[<p>偶尔,我们需要在数据库中处理一些东西,所以在写的程序中操作存储过程也是必须用到的一部分.下面就举一个在SpringTemplate下调用存储过程的小例子</p>
<a id="more"></a>
<script src="//git.oschina.net/pengfeii/Demo-Resp/star_widget_preview"></script>

<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><blockquote>
<p>需求: 有一个雇员表,里面有一个deptNo字段标识部门,我想查询DeptNo为1和2的雇员,并把他们分组罗列出来</p>
</blockquote>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>创建存储过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">create or replace procedure p_emp_list (</div><div class="line">       param1 in varchar2,</div><div class="line">       param2 in varchar2,</div><div class="line">       CUR_OUT_1 OUT SYS_REFCURSOR,</div><div class="line">       CUR_OUT_2 OUT SYS_REFCURSOR</div><div class="line">) is</div><div class="line">begin</div><div class="line">      open CUR_OUT_1 for</div><div class="line">           select deptno, empname from employee where deptno = param1;</div><div class="line">      open CUR_OUT_2 for</div><div class="line">           select deptno, empname from employee where deptno = param2;</div><div class="line">end p_emp_list;</div></pre></td></tr></table></figure>
<p>该过程有4个参数,前两个作为传入条件:两个不同的DeptNo,后两个得出的不同部门的结果集,至于Sql,为了省事,只查询了部门标号和雇员姓名用以说明</p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>编写DAO</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public List&lt;List&lt;Employee&gt;&gt; listEmployee(final String[] depts) &#123;</div><div class="line">    List&lt;List&lt;Employee&gt;&gt; resultList = (List&lt;List&lt;Employee&gt;&gt;) jdbcTemplate.execute(</div><div class="line">            new CallableStatementCreator() &#123;</div><div class="line">                public CallableStatement createCallableStatement(Connection con)</div><div class="line">                        throws SQLException &#123;</div><div class="line">                    String sqlProc = &quot;&#123;CALL P_EMP_LIST(?, ?, ?, ?)&#125;&quot;; // 调用存储过程的SQL</div><div class="line">                    CallableStatement cs = con.prepareCall(sqlProc);</div><div class="line">                    cs.setString(1, depts[0]);// 设置输入参数的值 部门编号1</div><div class="line">                    cs.setString(2, depts[1]);// 设置输入参数的值 部门编号2</div><div class="line">                    cs.registerOutParameter(3, OracleTypes.CURSOR);// 注册输出参数的类型 游标</div><div class="line">                    cs.registerOutParameter(4, OracleTypes.CURSOR);// 注册输出参数的类型 游标</div><div class="line">                    return cs;</div><div class="line">                &#125;</div><div class="line">            &#125;, new CallableStatementCallback() &#123;</div><div class="line">                public List doInCallableStatement(CallableStatement cs)</div><div class="line">                        throws SQLException, DataAccessException &#123;</div><div class="line">                    </div><div class="line">                    cs.execute();</div><div class="line">                    List list = new ArrayList(); // 存储所有的查询结果</div><div class="line">                    List&lt;Employee&gt; results1 = new ArrayList&lt;Employee&gt;(); // 存放部门1的结果</div><div class="line">                    ResultSet rs = (ResultSet) cs.getObject(3); // 获取存储过程第一个sql的值</div><div class="line">                    // 接收部门1所有雇员对象</div><div class="line">                    while (rs.next()) &#123;</div><div class="line">                        Employee e = new Employee();</div><div class="line">                        e.setDeptNo(rs.getString(&quot;deptNo&quot;));</div><div class="line">                        e.setEmpName(rs.getString(&quot;empName&quot;));</div><div class="line">                        results1.add(e);</div><div class="line">                    &#125;</div><div class="line">                    List&lt;Employee&gt; results2 = new ArrayList&lt;Employee&gt;(); // 存放部门2的结果</div><div class="line">                    rs = (ResultSet) cs.getObject(4); // 获取存储过程第二个sql的值</div><div class="line">                    // 接收部门2所有雇员对象</div><div class="line">                    while (rs.next()) &#123;</div><div class="line">                        Employee e = new Employee();</div><div class="line">                        e.setDeptNo(String.valueOf(rs.getObject(1)));</div><div class="line">                        e.setEmpName(String.valueOf(rs.getObject(2)));</div><div class="line">                        results2.add(e);</div><div class="line">                    &#125;</div><div class="line">                    rs.close(); // 关闭结果集</div><div class="line">                    list.add(results1);</div><div class="line">                    list.add(results2);</div><div class="line">                    </div><div class="line">                    return list;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">    return resultList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找个入口执行下(因为是借以前demo的空,所以随便加了个方法)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Controller</div><div class="line">@RequestMapping(&quot;/dept&quot;)</div><div class="line">public class DeptBean &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法:接收连个参数作为不同的部门编号 然后调用刚才写的逻辑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 分组查询</div><div class="line"> */</div><div class="line">@RequestMapping(&quot;/liste&quot;)</div><div class="line">public String liste(</div><div class="line">        @RequestParam(value=&quot;deptno&quot;, required=true) String deptno,</div><div class="line">        @RequestParam(value=&quot;deptno2&quot;, required=true) String deptno2,</div><div class="line">        Map&lt;String, List&lt;Dept&gt;&gt; model) &#123;</div><div class="line">    </div><div class="line">    System.out.println(deptno);</div><div class="line">    System.out.println(deptno2);</div><div class="line">    </div><div class="line">    List&lt;List&lt;Employee&gt;&gt; list = deptService.listEmployee(new String[]&#123;deptno, deptno2&#125;);</div><div class="line">    </div><div class="line">    return list.size() &gt; 0 ? &quot;/success&quot; : &quot;/error&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/mvc1/dept/liste?deptno=1&amp;deptno2=2</div></pre></td></tr></table></figure>
<p>附 控制台结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">1</div><div class="line">小明</div><div class="line">1</div><div class="line">小红</div><div class="line">1</div><div class="line">小白</div><div class="line">0---------------------</div><div class="line">2</div><div class="line">小绿</div><div class="line">2</div><div class="line">小黑</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring JDBCTemplate </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
